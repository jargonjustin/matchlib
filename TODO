
Support:
- Support compile at run-time transparently for module imports
    See PEP 263 â€“ http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/546539
    use module ihooks
    support compiling file to a module
- Implement an interactive interpreter (mpython)
    use module code

Error handling:
- Catch and throw better error messages during matching

Exception mapping:
- Exception backtrace mapping at runtime
    override sys.excepthook

Optimization:
- Move match-functions to start of file
    Prevents us from generating the non-closure nested functions multiple times
    Unsafe: extractors defined locally
    Workaround: Pass in extractors as arguments to match-function
- If all actions are guaranteed to return/raise, inline matching
    Inline the generated case function, but bind the variables and execute the
    action directly instead of returning the bindings and a signal
- Combine shared trees
    case Add(x, Num(0)): # should only call Add.__match__ once
    case Add(Num(0), x):
- Use and's instead of chained if's, where possible
    check generated bytecode to see what python optimizes better

Ideas to Explore:
- Find a way to support OCaml/NekoML style streams
    Support for multiple splats?
    Syntax extensions for match expressions?
- Pass query information to extractors
    Keyword parameters
